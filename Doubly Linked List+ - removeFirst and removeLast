#include <iostream>
#include "linkedlist.h"

/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	DoublyLL* list = new DoublyLL();
//	DoublyLL* list = (DoublyLL*) calloc(1, sizeof(DoublyLL));
	char op;
	int num, pos;
	do {
		cout << "Op: ";
		cin >> op;
		switch (op) {
			case 'f':
				cin >> num;
				list->addFirst(num);
				break;
			case 'l':
				cin >> num;
				list->addLast(num);
				break;
			case 'F':
				list->removeFirst();
				break;
			case 'L':
				list->removeLast();
				break;
			case 'p':
				list->print();
				break;
			case 'g':
				cin >> num;
				cout << "Pos " << num << " is " << list->get(num) << endl;
				break;
			case 'x':
				cout << "Exiting";
				break;
		}
	} while (op != 'x');
	return 0;
}

// Header File
struct node {
	int elem;
	node *next, *prev;
};

// Header File
class List {
	public:
	virtual void add(int num) = 0;
	virtual int get(int pos) = 0;
	virtual int remove(int num) = 0;
	virtual void print() = 0;
};

// Header File
#include "list.h"
#include <iostream>
#include "node.h"
using namespace std;

class DoublyLL : public List {
	node *head, *tail;
	int size;

	void addBetween(int num, node* pred, node* succ) {
		node* n = (node*) malloc( sizeof(node) );
		n->elem = num;
		n->next = succ;
		n->prev = pred;
		pred->next = n;
		succ->prev = n;
		size++;
	}

	void removeNode(node* n) {
        // TODO implement the removeNode
        if (n->prev) {
            n->prev->next = n->next;
        }
        if (n->next) {
            n->next->prev = n->prev;
        }
        free(n);
        size--;
	}

public:
	DoublyLL() {
		head = (node*) calloc(1, sizeof(node));
		tail = (node*) calloc(1, sizeof(node));
		head->next = tail;
		tail->prev = head;
		size = 0;
	}

	void addFirst(int num) {
		addBetween(num, head, head->next);
	}

	void addLast(int num) {
		addBetween(num, tail->prev, tail);
	}

	void removeFirst() {
        // TODO revise to only call removeNode(node*)
        if (head->next != tail) {
            removeNode(head->next);
        }
	}

	void removeLast() {
        // TODO revise to only call removeNode(node*)
        if (tail->prev != head) {
            removeNode(tail->prev);
        }
	}

	void add(int num) {
		addFirst(num);
	}

	int get(int pos) {
        // IGNORE
        return 0;
	}

	int remove(int num) {
        // IGNORE
        return 0;
	}

	void print() {
		cout << "Size: " << size << endl;
		node* curr = head->next;
		cout << "From HEAD: ";
		while (curr != tail) {
			cout << curr->elem;
			curr = curr->next;
            if (curr != tail) {
                cout << "->";
            }
		}
		curr = tail->prev;
		cout << endl << "From TAIL: ";
		while (curr != head) {
			cout << curr->elem;
			curr = curr->prev;
            if (curr != head) {
                cout << "<-";
            }
		}
		cout << endl;
	}
};
